{"attributes":"[{\"title\":\"元素属性（Attributes）\",\"sections\":[{\"text\":\"Jade标签属性在位于紧跟标签的圆括号中指定，属性值是<strong>JavaScript表达式</strong>。多个属性既可以使用逗号分隔，也可以使用空白字符分隔。\",\"code\":\"attributes\"},{\"text\":\"属性值可以使用任意的JavaScript表达式。\",\"code\":\"attribute-arbitrary-js-expression\"},{\"text\":\"当有多个属性时，可以跨多行指定。\",\"code\":\"attribute-multi-lines\"}]},{\"title\":\"非转义属性（Unescaped Attributes）\",\"sections\":[{\"text\":\"默认情况下，为了防止攻击，比如跨站脚本攻击，所有的标签属性值都是被转义的。如果不希望被转义，使用<code>!=</code>代替<code>=</code>\",\"code\":\"attribute-unescaped\",\"danger\":\"未转义的缓冲代码（unescaped buffered code）是危险的，在使用时必须对用户的输入进行验证以防止跨站脚本攻击。\"}]},{\"title\":\"布尔属性（Boolean Attributes）\",\"sections\":[{\"text\":\"对于布尔属性，出现即表示指定该属性，同时接受布尔值。当doctype不是html时，当结果是指定该属性时，该属性名会被自动添加为属性值。（这里只显示doctype为html时生成的HTML代码。）\",\"code\":\"attribute-boolean\"}]},{\"title\":\"样式属性\",\"sections\":[{\"text\":\"样式属性可以按常规使用字符串形式指定。\",\"code\":\"attribute-style\"},{\"text\":\"样式属性还可以使用对象形式指定。\",\"code\":\"attribute-style-object\"}]},{\"title\":\"类属性\",\"sections\":[{\"text\":\"类属性可以按常规使用字符串形式指定。\",\"code\":\"attribute-class\"},{\"text\":\"类属性可以使用数组指定。\",\"code\":\"attribute-class-array\"},{\"text\":\"类属性还可以使用属性名为类名，属性值为布尔值的对象指定。\",\"code\":\"attribute-class-object\"},{\"text\":\"Jade支持同时指定多个类属性。多个类属性编译后被合并到一起。\",\"code\":\"attribute-class-multi\"}]},{\"title\":\"简写形式\",\"sections\":[{\"text\":\"类属性和ID属性可以使用CSS选择符的形式指定。\",\"code\":\"attribute-shorthand\"},{\"text\":\"因为<code>div</code>是最常用的元素标签，所以在使用类或ID简写时，如果省略元素标签，将使用<code>div</code>。\",\"code\":\"attribute-shorthand-div\"}]},{\"title\":\"&attributes\",\"sections\":[{\"text\":\"<code>&attributes</code>接受一个对象作为参数，将该对象的每一个属性作为元素属性添加到元素中。\",\"code\":\"attribute-attributes\",\"danger\":\"通过<code>&attributes</code>添加的属性没有被自动转义，使用时要对用户的输入进行验证以防止跨站脚本攻击。\"}]}]","case":"[{\"title\":\"分支语句（case）\",\"sections\":[{\"text\":\"Jade中的<code>case</code>语句类似JavaScript中的<code>switch</code>语句，只是使用<code>case-when</code>而不是<code>switch-case</code>，同时不使用<code>break</code>。\",\"code\":\"case\"}]},{\"title\":\"Fall through\",\"sections\":[{\"text\":\"分支语句支持<code>fall through</code>\",\"code\":\"case-fall-through\"}]},{\"title\":\"块扩展\",\"sections\":[{\"text\":\"分支语句中可以使用标签块扩展。\",\"code\":\"case-block-expansion\"}]}]","code":"[{\"title\":\"代码（code）\",\"sections\":[{\"text\":\"在Jade模板中，支持3种形式的JavaScript代码。\"}]},{\"title\":\"不缓冲的代码\",\"sections\":[{\"text\":\"不缓冲的代码就是在编译后的HTML中不产生直接输出的JavaScript代码，以连字符作为第一个非空白字符表示。\",\"code\":\"code-unbuffered-one-line\"},{\"text\":\"要实现跨行，只需要对后续代码行进行缩进即可。\",\"code\":\"code-unbuffered-multi-line\"}]},{\"title\":\"缓冲的代码\",\"sections\":[{\"text\":\"缓冲的代码即JavaScript表达式的值被计算后会被输出到编译后的HTML文件中的代码，以等号作为第一个非空白字符表示。支持任何JavaScript表达式。出于安全考虑，结果都被转义。\",\"code\":\"code-buffered\"},{\"text\":\"可以使用行内形式，在元素标签后紧跟等号，然后是以空白字符分隔的JavaScript表达式\",\"code\":\"code-buffered-inline\"}]},{\"title\":\"不转义的缓冲的代码\",\"sections\":[{\"text\":\"对缓冲的代码不进行转义。使用<code>!=</code>代替<code>=</code>即可。\",\"code\":\"code-buffered-unescaped\",\"danger\":\"未转义的缓冲代码（unescaped buffered code）是危险的，在使用时必须对用户的输入进行验证以防止跨站脚本攻击。\"}]}]","comments":"[{\"title\":\"注释（comments）\",\"sections\":[{\"text\":\"Jade支持行注释、块注释和条件注释。\"}]},{\"title\":\"行注释\",\"sections\":[{\"text\":\"Jade使用与JavaScript中相同的行注释语法。\",\"code\":\"comments-single-line\"},{\"text\":\"当不希望某个注释被编译到HTML文件中时，在注释符后紧跟一个连字符（-）。\",\"code\":\"comments-unbuffered\"}]},{\"title\":\"块注释\",\"sections\":[{\"text\":\"Jade中的块注释，通过对后续行进行缩进实现。\",\"code\":\"comments-block\"}]},{\"title\":\"条件注释\",\"sections\":[{\"text\":\"Jade没有为条件注释提供特别的语法，因为所有以<code><</code>开始的行都被当作纯文本看待，所以只需要使用正常的HTML条件注释就可以了。\",\"code\":\"comments-conditional\"}]}]","conditionals":"[{\"title\":\"条件语句（conditionals）\",\"sections\":[{\"text\":\"Jade中可以通过<code>if</code>、<code>else if</code>、<code>else</code>和<code>unless</code>表示条件，用于标记代码的前导连接符（<code>-</code>）和条件表达式的括号都可以被省略。\",\"code\":\"conditionals\"},{\"text\":\"还可以使用<code>unless</code>来表示和<code>if</code>相反的逻辑。\",\"code\":\"conditionals-unless\"}]}]","doctype":"[{\"title\":\"文档类型（doctype）\",\"sections\":[{\"text\":\"doctype字符串后跟实际的doctype，两者以空白字符隔开。Jade提供了很多doctype简写，同时支持自定义doctype。这里只以HTML5的doctype举例，关于doctype简写请参考<a href='http://jade-lang.com/reference/doctype/'>官方文档</a>。\",\"code\":\"doctype\"}]}]","extends":"[{\"title\":\"extends指令和模板继承（extends & template inheritance）\",\"sections\":[{\"text\":[\"Jade提供了<code>extends</code>指令用于通过重写或改写模板中预先定义的内容块来扩充模板。从而实现模板继承。\"]}]},{\"title\":\"内容块\",\"sections\":[{\"text\":[\"内容块通过<code>block</code>关键字，内容块名和可选的内容定义，内容块的内容即后续的缩进块。内容块中可以包含内容块。\",\"下面的示例模板中，一共定义了6个内容块，其中内容块<code>head</code>、<code>css</code>、<code>header</code>、<code>footer</code>和<code>script</code>有内容；内容块<code>content</code>没有内容；而且内容块<code>css</code>包含在内容块<code>head</code>中。\"],\"layoutcode\":[\"layout-default\"]}]},{\"title\":\"扩充模板\",\"sections\":[{\"text\":[\"在扩充模板过程中，既可以对其中的内容块进行替换，也可以给其中的内容块添加前置内容或者附加内容。\",\"替换内容通过定义一个同名内容块实现。\",\"添加前置内容或者附加内容通过定义前置块或者附加块实现。前置块通过<code>block prepend</code>定义，附加块通过<code>block append</code>定义。定义前置块和附加块时，<code>block</code>是可选的。\",\"下面的示例模板中，扩充了模板layouts/layout-two-column。替换了原模板中的内容块<code>sidebar</code>和<code>primary</code>，给内容块<code>script</code>添加了前置块和附加块。\"],\"code\":\"page\"}]},{\"title\":\"模板继承\",\"sections\":[{\"text\":[\"通过<code>extends</code>指令和内容块就可以通过扩充模板实现模板继承。\",\"下面的示例中，进行了两次继承：page.jade继承自layouts/layout-two-column，而layouts/layout-two-column继承自layouts/layout-default。\"],\"code\":\"page\",\"layoutcode\":[\"layout-two-column\",\"layout-default\"],\"htmlcode\":\"page\"}]}]","filters":"[{\"title\":\"过滤器（filters）\",\"sections\":[{\"text\":[\"过滤器使我们可以在Jade模板中使用其他语言，它们接受纯文本块作为输入。\",\"所有的<a href='https://www.npmjs.com/browse/keyword/jstransformer'>JSTransformers</a>都可以用做Jade的过滤器，其中常用的有：<code>:coffee-script</code>, <code>:babel</code>, <code>:uglify-js</code>, <code>:less</code>和<code>:marked</code>。\"],\"code\":\"filters\",\"warning\":[\"过滤器是编译时，这使得它们很快， 但也意味着它们不支持动态内容。\",\"内建的过滤器在浏览器中不可用，如果要使用过滤器，需要在服务器端编译好。\"]}]}]","includes":"[{\"title\":\"includes指令（includes）\",\"sections\":[{\"text\":\"Jade提供了<code>include</code>指令用于在Jade文件中插入其他文件，包括Jade文件，纯文本和过滤器文件。\",\"jadecode\":\"includes-index\",\"includescode\":[\"head.jade\",\"foot.jade\"],\"htmlcode\":\"includes-index\"}]},{\"title\":\"包含纯文本文件\",\"sections\":[{\"text\":\"\",\"jadecode\":\"includes-plain-text-index\",\"includescode\":[\"style.css\",\"script.js\"],\"htmlcode\":\"includes-plain-text-index\"}]},{\"title\":\"包含过滤器文件\",\"sections\":[{\"text\":\"\",\"jadecode\":\"includes-filter-index\",\"includescode\":[\"article.md\"],\"htmlcode\":\"includes-filter-index\"}]}]","interpolation":"[{\"title\":\"插值（interpolation）\",\"sections\":[{\"text\":\"Jade提供了3种插值操作。\"}]},{\"title\":\"转义的字符串插值\",\"sections\":[{\"text\":\"字符串中，任何位于<code>#{}</code>中的内容都被当作JavaScript表达式；在编译时，<code>#{}</code>块会被替换为表达式的值，并且其中的特殊字符被转义。\",\"code\":\"interpolation-escape\"},{\"text\":\"当某个元素的内容是某个JavaScript表达式时，可以使用简写形式：在元素标签后紧跟一个等号（<code>=</code>），然后是空白字符隔开的JavaScript表达式。\",\"code\":\"interpolation-escape-shorthand\"},{\"text\":\"用于字符串插值的JavaScript表达式可以是任意的表达式。\",\"code\":\"interpolation-escape-arbitrary\"}]},{\"title\":\"不转义的字符串插值\",\"sections\":[{\"text\":\"当需要JavaScript表达式的值中的特殊字符不被转义时，使用<code>!{}</code>替换<code>#{}</code>；而简写形式时<code>！=</code>替换<code>=</code>。\",\"code\":\"interpolation-unescape\",\"danger\":\"在使用不转义的字符串插值时，当插值的内容来自用户输入时是很危险的。永远不要相信用户的输入。\"}]},{\"title\":\"元素标签插值\",\"sections\":[{\"text\":\"当需要插入HTML元素时，只需要把元素标签声明放在<code>#[]</code>中即可，当然，也可以使用相应的HTML。\",\"code\":\"interpolation-tag\"}]}]","iteration":"[{\"title\":\"迭代（iteration）\",\"sections\":[{\"text\":\"Jade支持两种迭代：<code>each...in</code>和<code>while</code>，其中可以使用<code>for</code>作为<code>each</code>的别名。\"}]},{\"title\":\"each\",\"sections\":[{\"text\":\"<code>each...in</code>可以用来对数组和对象进行迭代，默认情况下是对值进行迭代，这与<code>for...in</code>不同，而和ES6中的<code>for...of</code>相同。可以使用<code>for</code>作为<code>each</code>的别名。\",\"code\":\"iteration-each\"},{\"text\":\"在迭代过程中，还可以通过指定第二个变量来获取数组索引或者对象属性名。\",\"code\":\"iteration-each-index\"},{\"text\":\"被迭代的对象除了是数组或对象字面值外，还可以是结果为数组或对象的任何JavaScript表达式。\",\"code\":\"iteration-each-js-expression\"}]},{\"title\":\"while\",\"sections\":[{\"text\":\"<code>while</code>用于创建循环，和JavaScript中的<code>while</code>类似。\",\"code\":\"iteration-while\"}]}]","mixins":"[{\"title\":\"Mixins\",\"sections\":[{\"text\":\"mixin用于创建可重用的Jade块。mixin由mixin关键字，mixin名和一到多行Jade代码组成的mixin体组成。在使用时，在mixin名前添加加号（<code>+</code>）。\",\"code\":\"mixins\"},{\"text\":\"mixin被编译成函数，并且可以接受参数。\",\"code\":\"mixins-arguments\"}]},{\"title\":\"mixin块\",\"sections\":[{\"text\":\"在使用mixin时，mixin接受mixin块作为内容。Mixin块就是紧跟在”调用“mixin后的一到多行缩进的Jade代码。\",\"code\":\"mixin-block\"}]},{\"title\":\"mixin属性\",\"sections\":[{\"text\":\"mixin会自动获取一个参数<code>attributes</code>，就像JavaScript中函数会自动获取<code>arugments</code>和<code>this</code>一样。<code>attributes</code>的值通过在正常调用mixin后跟一对圆括号，然后在其中指定属性。\",\"code\":\"mixin-attributes\",\"note\":\"<code>attributes</code>的值默认被转义，如果要不被转义，需要使用<code>!=</code>代替<code>=</code>。\"},{\"text\":\"也可以使用<code>&amp;attributes</code>。\",\"code\":\"mixin-and-attributes\"}]},{\"title\":\"剩余参数\",\"sections\":[{\"text\":\"和ES6中的剩余参数一样。\",\"code\":\"mixin-rest\"}]}]","plain text":"[{\"title\":\"纯文本（plain text）\",\"sections\":[{\"text\":\"Jade中有3种方式表示纯文本，分别用于不同的情景。\"}]},{\"title\":\"管道文本\",\"sections\":[{\"text\":\"如果在文本前添加管道符，即<code>|</code>，那么这一行被当作纯文本。即如果某一行的第一个非空白字符是管道符，那么这一行就是纯文本。（管道文本必须单独占一行。）管道符和文本之间可以添加可选的空白字符。\",\"code\":\"plain-text-pipe\"}]},{\"title\":\"行内文本\",\"sections\":[{\"text\":\"在标签后以空白字符隔开的文本会被当作纯文本，即如果元素标签和文本之间只有空白字符，则文本被当作纯文本。\",\"code\":\"plain-text-inline\"}]},{\"title\":\"块文本\",\"sections\":[{\"text\":\"如果元素标签后紧跟英文句点，那么后面缩进的文本都会被当作这个元素内嵌的纯文本。\",\"code\":\"plain-text-block\"}]}]","tags":"[{\"title\":\"元素标签（tags）\",\"sections\":[{\"text\":\"默认情况下，一行中的第一个单词被当作HTML标签。HTML元素的嵌套关系使用缩进表示。\",\"code\":\"tags\"}]},{\"title\":\"块扩展\",\"sections\":[{\"text\":\"为了简洁，Jade提供了在一行内表示嵌套元素的语法：元素标签后紧跟冒号（<code>:</code>），然后是以空白字符隔开的嵌套元素。\",\"code\":\"tag-expansion\"}]},{\"title\":\"自关闭标签\",\"sections\":[{\"text\":\"HTML中所有的自关闭标签，比如<code>img</code>、<code>meta</code>等，都能被Jade识别并且自动关闭。另外，任何一个标签可以通过在末尾添加一个<code>/</code>显式地被关闭（只有在真正需要的时候这样做）。\",\"code\":\"tag-self-close\"}]}]"}